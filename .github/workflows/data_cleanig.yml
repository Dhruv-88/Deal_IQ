name: Deal Prediction Pipeline

# Trigger the workflow
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

# Set global environment variables
env:
  PYTHON_VERSION: '3.12'

jobs:
  # ==================== STAGE 1: SETUP ====================
  setup:
    name: "Stage 1: Environment Setup"
    runs-on: ubuntu-latest
    
    outputs:
      python-version: ${{ env.PYTHON_VERSION }}
      cache-hit: ${{ steps.cached-poetry-dependencies.outputs.cache-hit }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
      id: setup-python
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Load cached dependencies
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        echo "Installing Python dependencies..."
        poetry install --no-interaction --no-root
        echo "✓ Dependencies installed successfully"
    
    - name: Verify setup
      run: |
        echo "Verifying Python environment..."
        poetry run python --version
        poetry run python -c "import pandas, pyarrow; print('Core packages available')"
        echo "✓ Stage 1 (Setup) completed successfully"

  # ==================== STAGE 2: GOOGLE CLOUD AUTH ====================
  google-auth:
    name: "Stage 2: Google Cloud Authentication"
    runs-on: ubuntu-latest
    needs: setup
    
    outputs:
      auth-status: ${{ steps.auth-test.outputs.status }}
      project-id: ${{ steps.set-vars.outputs.project-id }}
      bucket-name: ${{ steps.set-vars.outputs.bucket-name }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python (from cache)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Restore cached dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ needs.setup.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies (ensure they exist)
      run: |
        echo "Ensuring dependencies are installed..."
        poetry install --no-interaction --no-root
        echo "Verifying core packages..."
        poetry run python -c "import pandas, pyarrow; print('Dependencies verified successfully')"
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Set environment variables
      id: set-vars
      run: |
        echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
        echo "GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}" >> $GITHUB_ENV
        echo "project-id=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_OUTPUT
        echo "bucket-name=${{ secrets.GCS_BUCKET_NAME }}" >> $GITHUB_OUTPUT
    
    - name: Test Google Cloud authentication
      id: auth-test
      run: |
        echo "Testing Google Cloud authentication..."
        
        # Test gcloud auth
        echo "Testing gcloud authentication:"
        gcloud auth list
        gcloud config list project
        
        # Test GCS access
        echo "Testing GCS bucket access:"
        if gsutil ls gs://${{ secrets.GCS_BUCKET_NAME }}; then
          echo "✓ Bucket access successful"
        else
          echo "! Bucket might be empty or doesn't exist yet"
        fi
        
        echo "status=success" >> $GITHUB_OUTPUT
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
    
    - name: Test Python GCS operations
      run: |
        echo "Testing Python GCS operations..."
        poetry run python scripts/test_auth.py
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
    
    - name: Authentication stage complete
      run: |
        echo "✓ Stage 2 (Google Cloud Authentication) completed successfully"
        echo "Project ID: ${{ secrets.GCP_PROJECT_ID }}"
        echo "Bucket: ${{ secrets.GCS_BUCKET_NAME }}"

  # ==================== STAGE 3: DATA CLEANING ====================
  data-cleaning:
    name: "Stage 3: Data Cleaning"
    runs-on: ubuntu-latest
    needs: [setup, google-auth]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python (from cache)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Restore cached dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ needs.setup.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies (ensure they exist)
      run: |
        echo "Ensuring dependencies are installed..."
        poetry install --no-interaction --no-root
        echo "Verifying core packages..."
        poetry run python -c "import pandas, pyarrow; print('Dependencies verified successfully')"
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Set environment variables
      run: |
        echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
        echo "GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}" >> $GITHUB_ENV
    
    - name: Data Cleaning Stage
      run: |
        echo "Starting Data Cleaning Stage..."
        echo "Waiting for data cleaning code to be provided..."
        echo "This stage will be implemented next"
        
        # TODO: Add data cleaning operations here
        # This is where the data cleaning code will go
        
        echo "✓ Stage 3 (Data Cleaning) placeholder completed"
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}

  